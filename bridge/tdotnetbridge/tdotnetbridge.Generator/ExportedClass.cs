using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace tdotnetbridge.Generator;

public class ExportedClass
{
    public required string Namespace { get; set; }
    public required string Name { get; set; }
    public required IEnumerable<ConstructorDeclarationSyntax> Constructors { get; set; }
    public required IEnumerable<MethodDeclarationSyntax> Methods { get; set; }

    private string IncludeGuard =>
        $"DOTNET_MANAGED_GENERATED_CLASS_{$"{Namespace}.{Name}".ToUpper().Replace(".", "_")}";

    public string OutputCode(SemanticModel semanticModel)
    {
        return $$"""
               /// AUTO-GENERATED
               /// This file is autogenerated by tdotnetbridge.Generator
               /// Changes to this file may be overwritten on build!
               
               #ifndef {{IncludeGuard}}
               #define {{IncludeGuard}}
               
               #include <include/qdotnetobject.h>
               
               class {{Name}} : public QDotNetObject {
                   public:
                       Q_DOTNET_OBJECT_INLINE({{Name}}, "{{Namespace}}.{{Name}}");
                       
               {{
                   string.Join('\n', Constructors.Select(syntax => GenerateConstructor(syntax, semanticModel)))
               }}
                       
               {{
                   string.Join('\n', Methods.Select(syntax => GenerateMethod(syntax, semanticModel)))
               }}
                       
                   private:
               {{
                   string.Join('\n', Methods.Select(syntax => GenerateMethodPrivateMember(syntax, semanticModel)))
               }}
               };
               
               #endif // {{IncludeGuard}}
               """;
    }

    private string GenerateConstructor(ConstructorDeclarationSyntax constructor, SemanticModel semanticModel)
    {
        var parameters = constructor.ParameterList.Parameters.Select(parameter => (parameter.Type!, parameter.Identifier.ToString())).ToList();
        
        var typeContext = new TypeContext(semanticModel);

        var args = parameters.Select(parameter =>
            $"const {typeContext.ToCppType(parameter.Item1)}& {Utilities.ToCamelCase(parameter.Item2)}");
        var constructorTemplateArgs = parameters.Select(parameter => typeContext.ToCppType(parameter.Item1));
        var invokeArgs = parameters.Select(parameter => Utilities.ToCamelCase(parameter.Item2)).Prepend("nullptr");

        return $$"""
                {{Name}}({{string.Join(", ", args)}}) : QDotNetObject(constructor<{{string.Join(", ", new [] {Name}.Concat(constructorTemplateArgs))}}>().invoke({{string.Join(", ", invokeArgs)}})) {}
        """;
    }

    private string GenerateMethod(MethodDeclarationSyntax method, SemanticModel semanticModel)
    {
        var name = method.Identifier.ToString();
        var returnType = method.ReturnType;
        var parameters = method.ParameterList.Parameters.Select(parameter => (parameter.Type!, parameter.Identifier.ToString())).ToList();

        var typeContext = new TypeContext(semanticModel);

        var args = parameters.Select(parameter =>
            $"const {typeContext.ToCppType(parameter.Item1)}& {Utilities.ToCamelCase(parameter.Item2)}");
        var invokeArgs = parameters.Select(parameter => Utilities.ToCamelCase(parameter.Item2)).Prepend("*this");
        
        return $$"""
                       {{typeContext.ToCppType(returnType)}} {{Utilities.ToCamelCase(name)}}({{string.Join(", ", args)}}) {
                           return method("{{name}}", _fn_{{name}}).invoke({{string.Join(", ", invokeArgs)}});
                       }
               """;
    }

    private string GenerateMethodPrivateMember(MethodDeclarationSyntax method, SemanticModel semanticModel)
    {
        var name = method.Identifier.ToString();
        var parameters = method.ParameterList.Parameters.Select(parameter => parameter.Type);
        var returnType = method.ReturnType;
        
        var typeContext = new TypeContext(semanticModel);

        var templateArgs = parameters.Prepend(returnType).Select(parameter => typeContext.ToCppType(parameter!));
        return $"""
                        QDotNetFunction<{string.Join(", ", templateArgs)}> _fn_{name};
                """;
    }
}
